// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: users.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (username, password, email)
VALUES ($1, $2, $3)
RETURNING id, created_at
`

type CreateUserParams struct {
	Username string `json:"username"`
	Password []byte `json:"password"`
	Email    string `json:"email"`
}

type CreateUserRow struct {
	ID        int64              `json:"id"`
	CreatedAt pgtype.Timestamptz `json:"created_at"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (CreateUserRow, error) {
	row := q.db.QueryRow(ctx, createUser, arg.Username, arg.Password, arg.Email)
	var i CreateUserRow
	err := row.Scan(&i.ID, &i.CreatedAt)
	return i, err
}

const getUserById = `-- name: GetUserById :one
SELECT id, username, password, email, created_at
FROM users
WHERE id = $1
`

type GetUserByIdRow struct {
	ID        int64              `json:"id"`
	Username  string             `json:"username"`
	Password  []byte             `json:"password"`
	Email     string             `json:"email"`
	CreatedAt pgtype.Timestamptz `json:"created_at"`
}

func (q *Queries) GetUserById(ctx context.Context, id int64) (GetUserByIdRow, error) {
	row := q.db.QueryRow(ctx, getUserById, id)
	var i GetUserByIdRow
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Password,
		&i.Email,
		&i.CreatedAt,
	)
	return i, err
}

const getUserFromInvitation = `-- name: GetUserFromInvitation :one
SELECT u.id, u.username, u.email, u.created_at, u.is_active
FROM users u
JOIN user_invitations ui
ON u.id = ui.user_id
WHERE ui.token = $1 AND ui.expiry > $2
`

type GetUserFromInvitationParams struct {
	Token  []byte             `json:"token"`
	Expiry pgtype.Timestamptz `json:"expiry"`
}

type GetUserFromInvitationRow struct {
	ID        int64              `json:"id"`
	Username  string             `json:"username"`
	Email     string             `json:"email"`
	CreatedAt pgtype.Timestamptz `json:"created_at"`
	IsActive  bool               `json:"is_active"`
}

func (q *Queries) GetUserFromInvitation(ctx context.Context, arg GetUserFromInvitationParams) (GetUserFromInvitationRow, error) {
	row := q.db.QueryRow(ctx, getUserFromInvitation, arg.Token, arg.Expiry)
	var i GetUserFromInvitationRow
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.CreatedAt,
		&i.IsActive,
	)
	return i, err
}

const getUsers = `-- name: GetUsers :many
SELECT id, username, email, created_at
FROM users
`

type GetUsersRow struct {
	ID        int64              `json:"id"`
	Username  string             `json:"username"`
	Email     string             `json:"email"`
	CreatedAt pgtype.Timestamptz `json:"created_at"`
}

func (q *Queries) GetUsers(ctx context.Context) ([]GetUsersRow, error) {
	rows, err := q.db.Query(ctx, getUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetUsersRow
	for rows.Next() {
		var i GetUsersRow
		if err := rows.Scan(
			&i.ID,
			&i.Username,
			&i.Email,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUserInfoById = `-- name: UpdateUserInfoById :exec
UPDATE users
SET username = $1, email = $2, is_active = $3
WHERE id = $4
`

type UpdateUserInfoByIdParams struct {
	Username string `json:"username"`
	Email    string `json:"email"`
	IsActive bool   `json:"is_active"`
	ID       int64  `json:"id"`
}

func (q *Queries) UpdateUserInfoById(ctx context.Context, arg UpdateUserInfoByIdParams) error {
	_, err := q.db.Exec(ctx, updateUserInfoById,
		arg.Username,
		arg.Email,
		arg.IsActive,
		arg.ID,
	)
	return err
}
