// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: posts.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createPost = `-- name: CreatePost :one
INSERT INTO posts (content, title, user_id, tags)
VALUES ($1, $2, $3, $4)
RETURNING id, created_at, updated_at
`

type CreatePostParams struct {
	Content string   `json:"content"`
	Title   string   `json:"title"`
	UserID  int64    `json:"user_id"`
	Tags    []string `json:"tags"`
}

type CreatePostRow struct {
	ID        int64              `json:"id"`
	CreatedAt pgtype.Timestamptz `json:"created_at"`
	UpdatedAt pgtype.Timestamptz `json:"updated_at"`
}

func (q *Queries) CreatePost(ctx context.Context, arg CreatePostParams) (CreatePostRow, error) {
	row := q.db.QueryRow(ctx, createPost,
		arg.Content,
		arg.Title,
		arg.UserID,
		arg.Tags,
	)
	var i CreatePostRow
	err := row.Scan(&i.ID, &i.CreatedAt, &i.UpdatedAt)
	return i, err
}

const deletePostById = `-- name: DeletePostById :execrows
DELETE FROM posts WHERE id = $1
`

func (q *Queries) DeletePostById(ctx context.Context, id int64) (int64, error) {
	result, err := q.db.Exec(ctx, deletePostById, id)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected(), nil
}

const getPostById = `-- name: GetPostById :one
SELECT id, user_id, title, content, created_at, updated_at, tags, version
FROM posts
WHERE id = $1
`

type GetPostByIdRow struct {
	ID        int64              `json:"id"`
	UserID    int64              `json:"user_id"`
	Title     string             `json:"title"`
	Content   string             `json:"content"`
	CreatedAt pgtype.Timestamptz `json:"created_at"`
	UpdatedAt pgtype.Timestamptz `json:"updated_at"`
	Tags      []string           `json:"tags"`
	Version   pgtype.Int4        `json:"version"`
}

func (q *Queries) GetPostById(ctx context.Context, id int64) (GetPostByIdRow, error) {
	row := q.db.QueryRow(ctx, getPostById, id)
	var i GetPostByIdRow
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Title,
		&i.Content,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Tags,
		&i.Version,
	)
	return i, err
}

const getPostsWithMetaData = `-- name: GetPostsWithMetaData :many
SELECT p.id, p.user_id, p.title, p.content, p.created_at, p.version, p.tags,
COUNT (c.id) AS comments_count
FROM posts p
LEFT JOIN comments c ON c.post_id = p.id
JOIN followers f ON f.follower_id = p.user_id OR p.user_id = $1
WHERE f.user_id = $1
GROUP BY p.id
ORDER BY p.created_at DESC
`

type GetPostsWithMetaDataRow struct {
	ID            int64              `json:"id"`
	UserID        int64              `json:"user_id"`
	Title         string             `json:"title"`
	Content       string             `json:"content"`
	CreatedAt     pgtype.Timestamptz `json:"created_at"`
	Version       pgtype.Int4        `json:"version"`
	Tags          []string           `json:"tags"`
	CommentsCount int64              `json:"comments_count"`
}

func (q *Queries) GetPostsWithMetaData(ctx context.Context, userID int64) ([]GetPostsWithMetaDataRow, error) {
	rows, err := q.db.Query(ctx, getPostsWithMetaData, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetPostsWithMetaDataRow
	for rows.Next() {
		var i GetPostsWithMetaDataRow
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Title,
			&i.Content,
			&i.CreatedAt,
			&i.Version,
			&i.Tags,
			&i.CommentsCount,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updatePostById = `-- name: UpdatePostById :one
UPDATE posts
SET title = $1, content = $2, version = version + 1
WHERE id = $3 AND version = $4
RETURNING version
`

type UpdatePostByIdParams struct {
	Title   string      `json:"title"`
	Content string      `json:"content"`
	ID      int64       `json:"id"`
	Version pgtype.Int4 `json:"version"`
}

func (q *Queries) UpdatePostById(ctx context.Context, arg UpdatePostByIdParams) (pgtype.Int4, error) {
	row := q.db.QueryRow(ctx, updatePostById,
		arg.Title,
		arg.Content,
		arg.ID,
		arg.Version,
	)
	var version pgtype.Int4
	err := row.Scan(&version)
	return version, err
}
