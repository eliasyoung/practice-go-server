// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: posts.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createPost = `-- name: CreatePost :one
INSERT INTO posts (content, title, user_id, tags)
VALUES ($1, $2, $3, $4)
RETURNING id, created_at, updated_at
`

type CreatePostParams struct {
	Content string   `json:"content"`
	Title   string   `json:"title"`
	UserID  int64    `json:"user_id"`
	Tags    []string `json:"tags"`
}

type CreatePostRow struct {
	ID        int64              `json:"id"`
	CreatedAt pgtype.Timestamptz `json:"created_at"`
	UpdatedAt pgtype.Timestamptz `json:"updated_at"`
}

func (q *Queries) CreatePost(ctx context.Context, arg CreatePostParams) (CreatePostRow, error) {
	row := q.db.QueryRow(ctx, createPost,
		arg.Content,
		arg.Title,
		arg.UserID,
		arg.Tags,
	)
	var i CreatePostRow
	err := row.Scan(&i.ID, &i.CreatedAt, &i.UpdatedAt)
	return i, err
}

const deletePostById = `-- name: DeletePostById :execrows
DELETE FROM posts WHERE id = $1
`

func (q *Queries) DeletePostById(ctx context.Context, id int64) (int64, error) {
	result, err := q.db.Exec(ctx, deletePostById, id)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected(), nil
}

const getPostById = `-- name: GetPostById :one
SELECT id, user_id, title, content, created_at, updated_at, tags
FROM posts
WHERE id = $1
`

type GetPostByIdRow struct {
	ID        int64              `json:"id"`
	UserID    int64              `json:"user_id"`
	Title     string             `json:"title"`
	Content   string             `json:"content"`
	CreatedAt pgtype.Timestamptz `json:"created_at"`
	UpdatedAt pgtype.Timestamptz `json:"updated_at"`
	Tags      []string           `json:"tags"`
}

func (q *Queries) GetPostById(ctx context.Context, id int64) (GetPostByIdRow, error) {
	row := q.db.QueryRow(ctx, getPostById, id)
	var i GetPostByIdRow
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Title,
		&i.Content,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Tags,
	)
	return i, err
}

const updatePostById = `-- name: UpdatePostById :exec
UPDATE posts
SET title = $1, content = $2
WHERE id = $3
`

type UpdatePostByIdParams struct {
	Title   string `json:"title"`
	Content string `json:"content"`
	ID      int64  `json:"id"`
}

func (q *Queries) UpdatePostById(ctx context.Context, arg UpdatePostByIdParams) error {
	_, err := q.db.Exec(ctx, updatePostById, arg.Title, arg.Content, arg.ID)
	return err
}
